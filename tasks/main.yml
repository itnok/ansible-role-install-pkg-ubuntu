---
# tasks file for ansible-role-install-pkg-ubuntu
- name: "Include role variables"
  include_vars: "main.yml"

- name: "Gather facts"
  setup: # equivalent to "gather_facts: yes"

- name: "Check is_ubuntu facts"
  include_role:
    name: itnok.is_ubuntu

# In a context such a Docker container systemd might not be necessarily part of the game...
- name: "Check whether systemd-run is available"
  stat:
    path: "/usr/bin/systemd-run"
  register: manage_pkg_systemd_run

- name: "Wait for any possibly running unattended upgrade to finish"
  raw: systemd-run --property="After=apt-daily.service apt-daily-upgrade.service" --wait /bin/true
  when:
    - manage_pkg_systemd_run.stat.exists
    - not is_ubuntu_inside_container | bool

- name: "Update apt package cache"
  apt:
    cache_valid_time: 1200
  # Ubuntu servers sometimes return errors depending on the randomly picked mirror
  # Play stubborn here to give it more chances to get executed
  register: apt_operation
  retries: 7
  delay: 15
  until: apt_operation is succeeded

- name: "Make sure {{ manage_pkg_dependency | length }} needed deb packages are installed"
  apt:
    name: "{{ manage_pkg_dependency }}"
    state: present

- name: "{{ 'Add' if manage_pkg_key_do == 'present' else 'Remove' }} {{ manage_pkg_key | length }} keys from key server to authenticate deb trusted packages"
  apt_key:
    keyserver: "{{ item.url | regex_search('^hkp://.*') | regex_replace('^hkp://([a-z0-9A-Z\\.\\-]+)(:[0-9]+)?$', '\\1') }}"
    id: "{{ item.key }}"
    state: "{{ manage_pkg_key_do }}"
  when:
    - item.url is match('^hkp://.*')
    - not is_ubuntu_behind_proxy
  with_items: "{{ manage_pkg_key }}"
  # Key servers sometimes return an HTTP error
  # Play stubborn here to give it more chances to get executed
  register: apt_key_operation
  retries: 7
  delay: 15
  until: apt_key_operation is succeeded

- name: "{{ 'Add' if manage_pkg_key_do == 'present' else 'Remove' }} {{ manage_pkg_key | length }} keys from url to authenticate deb trusted packages"
  apt_key:
    url: "{{ item.url | regex_search('^http(s)?://.*') }}"
    id: "{{ item.key }}"
    state: "{{ manage_pkg_key_do }}"
  when:
    - item.url is match('^http(s)?://.*')
    - not is_ubuntu_behind_proxy
  with_items: "{{ manage_pkg_key }}"
  # Key servers sometimes return an HTTP error
  # Play stubborn here to give it more chances to get executed
  register: apt_key_operation
  retries: 7
  delay: 15
  until: apt_key_operation is succeeded

- name: "{{ 'Add' if manage_pkg_key_do == 'present' else 'Remove' }} {{ manage_pkg_key | length }} keys via proxy to authenticate deb trusted packages"
  command:
    argv:
      - "/usr/bin/apt-key"
      - "adv"
      - "--keyserver-options"
      - "http-proxy={{ lookup('env', 'http_proxy') | default(lookup('env', 'HTTP_PROXY'), true) }}"
      - "--keyserver"
      - "{{ item.url }}"
      - "--recv-keys"
      - "{{ item.key }}"
  when: is_ubuntu_behind_proxy
  with_items: "{{ manage_pkg_key }}"
  # Key servers sometimes return an HTTP error
  # Play stubborn here to give it more chances to get executed
  register: apt_key_operation
  retries: 7
  delay: 15
  until: apt_key_operation is succeeded

- name: "{{ 'Add' if manage_pkg_repo_do == 'present' else 'Remove' }} {{ manage_pkg_repo|length }} apt repositories"
  apt_repository:
    repo: "{{ item }}"
    state: "{{ manage_pkg_repo_do }}"
  with_items: "{{ manage_pkg_repo }}"
  # PPAs sometimes return an HTTP 503 error
  # Play stubborn here to give it more chances to get executed
  register: apt_repository_operation
  retries: 7
  delay: 15
  until: apt_repository_operation is succeeded

- name: "Wait for any possibly running unattended upgrade to finish"
  raw: systemd-run --property="After=apt-daily.service apt-daily-upgrade.service" --wait /bin/true
  when:
    - manage_pkg_systemd_run.stat.exists
    - not is_ubuntu_inside_container | bool

- name: "Refresh apt package cache for new repos"
  apt:
    cache_valid_time: 1200

- name: "{{ 'Add' if manage_pkg_app_do == 'present' else 'Remove' }} {{ manage_pkg_app|length }} deb packages"
  apt:
    name: "{{ manage_pkg_app }}"
    state: "{{ manage_pkg_app_do }}"
    install_recommends: "{{ manage_pkg_app_install_recommends }}"
